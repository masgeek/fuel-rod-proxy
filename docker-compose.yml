version: '2.2'

services:
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - web
      - internal
    ports:
      - 80:80
      - 443:443
    links:
      - portal:portal
      - fuelrod:fuelrod
    mem_limit: 300m
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - internal
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"  
  
  db:
    container_name: db
    image: mysql:8.0.21
    # command: mysqld --sql_mode=""
    volumes:
      - ${PWD}/mysql-init-files:/docker-entrypoint-initdb.d
      - ${PWD}/db_data:/var/lib/mysql
      - ${PWD}/db_conf:/etc/mysql/conf.d
    restart: always
    environment:
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE}
      MYSQL_USER: ${DATABASE_USERNAME}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      REMOTE_SQL: ${PWD}/mysql-init-files/init.sql
    networks:
      - internal

  adminer:
    container_name: adminer
    image: adminer
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql
      ADMINER_DEFAULT_DB_HOST: db
      ADMINER_DEFAULT_DB_NAME: ${DATABASE}
      ADMINER_DESIGN: ${THEME}
      ADMINER_PLUGINS: ${PLUGINS}
    restart: on-failure
    links:
      - db:mysql
    ports:
      - 9080:8080
    networks:
      - web
      - internal
    depends_on:
      - db

  fuelrod:
    container_name: fuelrod
    image: tsobu/fuelrod-service-api:latest
    hostname: fuelrod
    restart: always
    depends_on:
      - db
    networks:
      - web
      - internal
    ports:
      - 9000:9000
    volumes:
      - ${PWD}/log:/log
    environment:
      - DEBUG=${DEBUG}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DEMO_MODE=${DEMO_MODE}
      - VERIFY_CERT=${VERIFY_CERT}
      - WEBHOOK=${WEBHOOK}
      - SERVICE=${SERVICE}
      - OPT_OUT_CODE=${OPT_OUT_CODE}
      - TEST_NUMBERS=${TEST_NUMBERS}
      - AT_ENDPOINT=${AT_ENDPOINT}
      - AT_AUTH_KEY=${AT_AUTH_KEY}
      - AT_USER_NAME=${AT_USER_NAME}
      - AT_DEFAULT_SENDER=${AT_DEFAULT_SENDER}
      - MS_ENDPOINT=${MS_ENDPOINT}
      - MS_USER_NAME=${MS_USER_NAME}
      - MS_AUTH_KEY=${MS_AUTH_KEY}
      - MS_DEFAULT_SENDER=${MS_DEFAULT_SENDER}
      - UPLOADS_DIR=${UPLOADS_DIR}
      - RATE_TYPE=${RATE_TYPE}
      - ENABLE_RATE_LIMIT=${ENABLE_RATE_LIMIT}
      - RATE_LIMIT=${RATE_LIMIT}
      - KAFKA_CONSUMER_SERVER=${KAFKA_CONSUMER_SERVER}
  
  jobs:
    container_name: jobs
    image: tsobu/fuelrod-service-jobs:latest
    restart: on-failure
    depends_on:
      - db
    ports:
      - 9001:9001
    volumes:
      - ${PWD}/log:/log
    environment:
      - DEBUG=${DEBUG}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - BATCH_CRON=${BATCH_CRON}
      - KAFKA_PRODUCER_SERVER=${KAFKA_PRODUCER_SERVER}
    networks:
      - internal
      - web

  logspout:
    container_name: logspout
    image: logdna/logspout:latest
    restart: always
    environment:
      - LOGDNA_KEY=${LOG_DNA_KEY}
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'

  portal:
    image: tsobu/fuelrod-portal:latest
    hostname: portal
    container_name: portal
    restart: on-failure
    depends_on:
      - fuelrod
    ports:
      - 5000:5000
    networks:
      - web
      - internal

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    restart: unless-stopped
    environment:
      DOZZLE_TAILSIZE: 200
      LOGSENE_ENABLED: "false"
    networks:
      - web
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080

networks:
  internal:
    external: false
  web:
    external: true
