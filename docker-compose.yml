version: '2.2'

services:
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: unless-stopped
    volumes:
      - ./nginx:/etc/nginx/conf.d
      #- ./nginx:/etc/nginx
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - web
      - internal
    ports:
      - 80:80
      - 443:443
    links:
      - portal:portal
      - fuelrod:fuelrod
    mem_limit: 120m
    # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - internal
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"  
  
  db:
    container_name: db
    image: mysql:8.0.21
    # command: mysqld --sql_mode=""
    # command: --default-authentication-plugin=mysql_native_password
    volumes:
      - ${PWD}/mysql-init-files:/docker-entrypoint-initdb.d
      - ${PWD}/db_data:/var/lib/mysql
      - ${PWD}/db_conf:/etc/mysql/conf.d
    restart: always
    environment:
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASS}
      REMOTE_SQL: ${PWD}/mysql-init-files/init.sql
    networks:
      - internal

  adminer:
    container_name: adminer
    image: adminer
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql
      ADMINER_DEFAULT_DB_HOST: db
      ADMINER_DEFAULT_DB_NAME: ${DB_NAME}
      ADMINER_DESIGN: ${THEME}
      ADMINER_PLUGINS: ${PLUGINS}
    restart: on-failure
    links:
      - db:mysql
      - db2:mysql
    ports:
      - 9080:8080
    networks:
      - web
      - internal
    depends_on:
      - db

  fuelrod:
    container_name: fuelrod
    image: tsobu/fuelrod-service-api:latest
    hostname: fuelrod
    restart: always
    depends_on:
      - db
    networks:
      - web
      - internal
    ports:
      - 9000:9000
    volumes:
      - ${PWD}/log:/log
    environment:
       SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
       DB_URL: ${DB_URL}
       DB_USER: ${DB_USER}
       DB_PASS: ${DB_PASS}
       OPT_OUT: ${OPT_OUT}
       DUPLICATE_WINDOW: ${DUPLICATE_WINDOW}

  migrations:
    container_name: fuelrod-migrations
    hostname: fuelrod-migrations
    image: tsobu/fuelrod-migration:latest
    restart: on-failure
    networks:
      - internal
    volumes:
      - ${PWD}/log:/log
    environment:
       DB_URL: ${DB_URL}
       DB_USER: ${DB_USER}
       DB_PASS: ${DB_PASS}
  
  portal:
    image: tsobu/fuelrod-portal:latest
    hostname: portal
    container_name: portal
    restart: on-failure
    depends_on:
      - fuelrod
    ports:
      - 5000:5000
    networks:
      - web
      - internal
    mem_limit: 300M

  db2:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
    volumes:
      - ${PWD}/ghost_mysql:/var/lib/mysql 
    networks:
      - internal
  ghost:
    image: ghost:latest
    restart: always
    depends_on:
      - db2
    environment:
      url: https://example.com
      database__client: mysql
      database__connection__host: db2
      database__connection__user: ${DB_USER}
      database__connection__password: ${DB_PASS}
      database__connection__database: blog
    volumes:
      - ${PWD}/ghost/content:/var/lib/ghost/content
    networks:
      - web
      - internal


  # blog:
  #   image: docker.io/bitnami/ghost:4
  #   hostname: blog
  #   container_name: blog
  #   ports:
  #     - 2368:2368
  #   volumes:
  #     - '${PWD}/ghost_data:/bitnami/ghost'
  #   depends_on:
  #     - db
  #   environment:
  #     ALLOW_EMPTY_PASSWORD: "no"
  #     GHOST_DATABASE_HOST: db
  #     #GHOST_DATABASE_PORT_NUMBER: 3306
  #     GHOST_DATABASE_USER: ${DB_USER}
  #     GHOST_DATABASE_PASSWORD: ${DB_PASS}
  #     GHOST_DATABASE_NAME: blog
  #   networks:
  #     - web
  #     - internal

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    restart: unless-stopped
    environment:
      DOZZLE_TAILSIZE: 200
      LOGSENE_ENABLED: "false"
    networks:
      - web
      - internal
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 9999:8080
    mem_limit: 100m
    
  # portainer:
  #     image: portainer/portainer-ce    
  #     container_name: portainer
  #     restart: always
  #     networks:
  #       - web
  #       - internal
  #     volumes:
  #         - '/var/run/docker.sock:/var/run/docker.sock'
  #         - ${PWD}/portainer_data:/portainer_data
  #     ports:
  #     - '8010:8000'
  #     - '9010:9000'
networks:
  internal:
    external: false
  web:
    external: true

volumes:
  portainer_data:
  ghost-volume: