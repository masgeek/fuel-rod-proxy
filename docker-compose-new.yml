version: '3.3'

services:
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - web
      - internal
    ports:
      - 80:80
      - 443:443
    links:
      - portal:portal
      - fuelrod:fuelrod
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    networks:
      - internal
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"  
  
  db:
    container_name: db
    image: mysql:8.0.20
    command: mysqld --sql_mode=""
    cap_add:
      - SYS_NICE  # CAP_SYS_NICE
    volumes:
      - ${PWD}/mysql-init-files:/docker-entrypoint-initdb.d
      - ${PWD}/db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_HOST: "%"
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MYSQL_DATABASE: ${DATABASE}
      MYSQL_USER: ${DATABASE_USERNAME}
      MYSQL_PASSWORD: ${DATABASE_PASSWORD}
      REMOTE_SQL: ${PWD}/mysql-init-files/init.sql
    networks:
      - internal

  adminer:
    container_name: adminer
    image: adminer
    environment:
      ADMINER_DEFAULT_DB_DRIVER: mysql
      ADMINER_DEFAULT_DB_HOST: db
      ADMINER_DEFAULT_DB_NAME: ${DATABASE}
      ADMINER_DESIGN: ${THEME}
      ADMINER_PLUGINS: ${PLUGINS}
    restart: on-failure
    links:
      - db:mysql
    ports:
      - 9080:8080
    networks:
      - web
      - internal
    depends_on:
      - db
         
  zookeeper:
    container_name: zookepeer
    image: bitnami/zookeeper:latest
    ports:
      - 2181:2181
    environment:
      DEBUG: "true"
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_SERVER_ID: 1
      ZOO_CLIENT_PORT: 2181
      # ZOO_TICK_TIME: 2000
      # ZOO_INIT_LIMIT: 5
      # ZOO_SYNC_LIMIT: 2
    networks:
      - web
      - internal
    volumes:
      - ./zookeeper:/opt/bitnami/zookeeper

  kafka:
    image: wurstmeister/kafka
    #    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - 9092:9092
      - 9094:9094
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CLUSTER_ID: 1
      KAFKA_LOG_RETENTION_HOURS: 1
      # KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_HOST}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://kafka:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: ${KAFKA_CREATE_TOPICS}
      KAFKA_CREATE_TOPICS: ${KAFKA_TOPICS}
      KAFKA_LOG_DIRS:  ${KAFKA_LOG_DIRS}
    networks:
      - web
      - internal
    links:
      - zookeeper:zookeeper
    depends_on:
      - zookeeper
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka:/kafka

  fuelrod:
    container_name: fuelrod
    image: tsobu/fuelrod-service-api:latest
    hostname: fuelrod
    restart: always
    depends_on:
      - db
    networks:
      - web
      - internal
    ports:
      - 9000:9000
    volumes:
      - ${PWD}/log:/log
    environment:
      - DEBUG=${DEBUG}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DEMO_MODE=${DEMO_MODE}
      - VERIFY_CERT=${VERIFY_CERT}
      - WEBHOOK=${WEBHOOK}
      - SERVICE=${SERVICE}
      - OPT_OUT_CODE=${OPT_OUT_CODE}
      - TEST_NUMBERS=${TEST_NUMBERS}
      - AT_ENDPOINT=${AT_ENDPOINT}
      - AT_AUTH_KEY=${AT_AUTH_KEY}
      - AT_USER_NAME=${AT_USER_NAME}
      - AT_DEFAULT_SENDER=${AT_DEFAULT_SENDER}
      - MS_ENDPOINT=${MS_ENDPOINT}
      - MS_USER_NAME=${MS_USER_NAME}
      - MS_AUTH_KEY=${MS_AUTH_KEY}
      - MS_DEFAULT_SENDER=${MS_DEFAULT_SENDER}
      - UPLOADS_DIR=${UPLOADS_DIR}
      - RATE_TYPE=${RATE_TYPE}
      - ENABLE_RATE_LIMIT=${ENABLE_RATE_LIMIT}
      - RATE_LIMIT=${RATE_LIMIT}
      - KAFKA_CONSUMER_SERVER=${KAFKA_CONSUMER_SERVER}
  
  jobs:
    container_name: jobs
    image: tsobu/fuelrod-service-jobs:latest
    restart: on-failure
    depends_on:
      - db
    ports:
      - 9001:9001
    volumes:
      - ${PWD}/log:/log
    environment:
      - DEBUG=${DEBUG}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - DATABASE_URL=${DATABASE_URL}
      - DATABASE_USERNAME=${DATABASE_USERNAME}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - BATCH_CRON=${BATCH_CRON}
      - KAFKA_PRODUCER_SERVER=${KAFKA_PRODUCER_SERVER}
    networks:
      - internal
      - web

  logspout:
    container_name: logspout
    image: logdna/logspout:latest
    restart: always
    environment:
      - LOGDNA_KEY=${LOG_DNA_KEY}
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'

  portal:
    image: tsobu/fuelrod-portal:latest
    hostname: portal
    container_name: portal
    restart: on-failure
    depends_on:
      - fuelrod
    ports:
      - 5000:5000
    networks:
      - web
      - internal

volumes:
  data:

networks:
  internal:
    external: false
  web:
    external: true
